<?php

// Drupal Hook.

/**
 * Implements of hook_menu();
 */
function sbadmin2_helper_menu() {
    $items = array();
    $items['sbadmin2-login'] = array(
        'title' => 'Login',
        'description' => 'Login Page.',
        'page callback' => 'sbadmin2_helper_login_page_callback',
        'access callback' => true,
        'weight' => -5,
        'type' => MENU_CALLBACK,
    );
    $items['sbadmin2-front'] = array(
        'title' => 'Front',
        'description' => 'Front Page.',
        'page callback' => 'sbadmin2_helper_front_page_callback',
        'access callback' => true,
        'weight' => -10,
        'type' => MENU_CALLBACK,
    );
    $items['sbadmin2-dashboard'] = array(
        'title' => 'Dashboard',
        'description' => 'Dashboard.',
        'page callback' => 'sbadmin2_helper_dashboard_page_callback',
        'access callback' => 'user_is_logged_in',
        'weight' => -10,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * Adds our extra option to the field widget settings form.
 *
 * eg at
 * /admin/structure/types/manage/{CONTENT_TYPE}/fields/{ENTITYREFERENCE_FIELD}
 *
 * Implements hook_form_FORMID_alter().
 */
function sbadmin2_helper_form_field_ui_field_edit_form_alter(&$form, $form_state) {
    $supported_widgets = array(
        'entityreference_autocomplete',
        'entityreference_autocomplete_tags',
    );
    if (in_array($form['instance']['widget']['type']['#value'], $supported_widgets)) {
        $instance = field_info_instance($form['instance']['entity_type']['#value'], $form['instance']['field_name']['#value'], $form['instance']['bundle']['#value']);
        $widget = $instance['widget'];
        $defaults = field_info_widget_settings($widget['type']);
        $settings = array_merge($defaults, $widget['settings']);
        $form['instance']['widget']['settings']['sbadmin2_helper'] = array(
            '#type' => 'fieldset',
            '#title' => t('SBAdmin2'),
            '#collapsible' => TRUE,
        );
        $form['instance']['widget']['settings']['sbadmin2_helper']['select2_convert'] = array(
            '#type' => 'checkbox',
            '#title' => t('Convert to Select2'),
            '#description' => t('This will convert to select2.'),
            '#default_value' => isset($settings['sbadmin2_helper']['select2_convert']) ? $settings['sbadmin2_helper']['select2_convert'] : FALSE,
        );
    }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Support select2 dan entityconnect.
 */
function sbadmin2_helper_field_widget_form_alter(&$element, &$form_state, $context) {

    if ($context['field']['type'] == 'entityreference') {
        // Support for library select2.
        if (!empty($context['instance']['widget']['settings']['sbadmin2_helper']['select2_convert'])) {
            $element['target_id']['#sbadmin2_select2'] = true;
        }
        //  Support for module entityconnect.
        $supported_widgets = array(
            'entityreference_autocomplete',
            'entityreference_autocomplete_tags',
        );
        if (module_exists('entityconnect') && in_array($context['instance']['widget']['type'], $supported_widgets)) {
            $element['#pre_render'][] = 'sbadmin2_element_pre_render_entityconnect';
        }
    }
}

// Page Callback.

/**
 * Callback of /sbadmin2-login.
 */
function sbadmin2_helper_login_page_callback() {
    global $user;
    if ($user->uid) {
        return drupal_goto();
    }
    drupal_set_title('');
    $block = block_load('user', 'login');
    return _block_get_renderable_array(_block_render_blocks(array($block)));
}

/**
 * Callback of /sbadmin2-front.
 */
function sbadmin2_helper_front_page_callback() {
    global $user;
    if ($user->uid) {
        menu_set_active_item('sbadmin2-dashboard');
    }
    else {
        menu_set_active_item('sbadmin2-login');
    }
    return menu_execute_active_handler(NULL, FALSE);
}

/**
 * Callback of /sbadmin2-dashboard.
 */
function sbadmin2_helper_dashboard_page_callback() {
    return 'Welcome.';
}

// Form Alter.

/**
 * Implements of hook_form_FORM_ID_alter().
 *
 */
function sbadmin2_helper_form_menu_edit_item_alter(&$form, &$form_state) {
    // Unset the previous value so that the new values get saved.
    if (isset($form['options']['#value']['sbadmin2_icon'])) {
        unset($form['options']['#value']['sbadmin2_icon']);
    }
    $default_value = isset($form['original_item']['#value']['options']['sbadmin2_icon']) ? $form['original_item']['#value']['options']['sbadmin2_icon'] : '';
    $form['options']['sbadmin2_icon'] = [
        '#title' => t('SBAdmin2 Icon'),
        '#tree' => true,
        '#parents' => array(
            'options',
            'sbadmin2_icon',
        ),
        '#type' => 'textfield',
        '#description' => 'Give the icon name. Example: <em>dashboard</em>.',
        '#default_value' => $default_value,
    ];
}

/**
 * Implements of hook_form_FORM_ID_alter().
 */
function sbadmin2_helper_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {
    // todo:
    $form['front_page']['site_frontpage']['#value'] = 'sbadmin2-front';
    $form['front_page']['site_frontpage']['#disabled'] = true;
    $form['front_page']['site_frontpage']['#description'] .= ' '. t('<strong>This value take over by sbadmin2_helper module</strong>.');
}

/**
 * Implements of hook_js_info().
 */
function sbadmin2_helper_js_info() {
    $callbacks['entityreference_autocomplete_single'] = array();
    return $callbacks;
}

function sbadmin2_helper_js_callback_entityreference_autocomplete_single($args, $data) {
  $json = array();
  $json['content'] = '<p>My content</p>';
  return $json;
}

/**
 * Implements of hook_systemix_conditional_attached_library().
 */
function sbadmin2_helper_systemix_conditional_attached_library() {
    return [
        'sbadmin2_helper' => ['sbadmin2', 'sbadmin2.managed_file'],
    ];
}
